/*
 * Copyright 2011-2012 GRNET S.A. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY GRNET S.A. ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GRNET S.A OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and
 * documentation are those of the authors and should not be
 * interpreted as representing official policies, either expressed
 * or implied, of GRNET S.A.
 */

@namespace("gr.grnet.aquarium.message.avro.gen")
protocol AquariumPolicy {
  record ResourceTypeMsg {
    string name; // name of resource type
    string unit; // name of the charging unit
    string chargingBehaviorClass; // the charging behavior implementation
  }

  record CronSpecTupleMsg {
    string a;
    string b;
  }

  record EffectiveUnitPriceMsg {
    string unitPrice; // credits per unit (see ResourceTypeMsg.unit)
    union {CronSpecTupleMsg, null} when;
  }

  record EffectivePriceTableMsg {
    array<EffectiveUnitPriceMsg> priceOverrides;
  }

  record SelectorValueMsg {
    union {
      EffectivePriceTableMsg,
      map<SelectorValueMsg>
    } selectorValue;
  }

  record FullPriceTableMsg {
    map<map<SelectorValueMsg>> perResource;
  }

  record PolicyMsg {
    string originalID; // From message creator (e.g. this is present for the default policy.json)
    union {string, null} inStoreID; // From Aquarium (message recipient)
    union {string, null} parentID; // FIXME: parentOriginalID and parentInStoreID
    long validFromMillis;
    long validToMillis;
    map<ResourceTypeMsg> resourceMapping; // Map[ResourceTypeMsg.name.type, ResourceTypeMsg] the known resource types
    array<string> chargingBehaviors;      // the known charging behavior implementations
    map<FullPriceTableMsg> roleMapping;   // the pricing "plan" per role
  }
}