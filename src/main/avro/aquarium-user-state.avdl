/*
 * Copyright 2011-2012 GRNET S.A. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY GRNET S.A. ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GRNET S.A OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and
 * documentation are those of the authors and should not be
 * interpreted as representing official policies, either expressed
 * or implied, of GRNET S.A.
 */

@namespace("gr.grnet.aquarium.message.avro.gen")
protocol AquariumUserState {
  import idl "aquarium-policy.avdl";
  import idl "aquarium-anyvalue.avdl";
  import idl "aquarium-events.avdl";

  record UserAgreementMsg {
    string id;
    union {string, null} relatedIMEventOriginalID;
    string userID;
    long occurredMillis = 0; // when was this agreement created inside Aquarium
    long @order("ascending") validFromMillis;
    long validToMillis;
    string role;
    union {FullPriceTableMsg, null} fullPriceTableRef; // If null, then get from aquarium policy
    union {IMEventMsg, null} relatedIMEventMsg; // non-null if there is a related IMEvent
  }

  record ResourceInstanceChargingStateMsg {
    string clientID; // who sent me?
    string resource; // what kind of resource am I?
    string instanceID; // who am I?
    map<AnyValueMsg> details;
    array<ResourceEventMsg> previousEvents;
    array<ResourceEventMsg> implicitlyIssuedStartEvents;
   string accumulatingAmount;
   string oldAccumulatingAmount;
   string previousValue;
   string currentValue;
  }

  record ResourcesChargingStateMsg {
    string resource; // who am I?
    map<AnyValueMsg> details;
    map<ResourceInstanceChargingStateMsg> stateOfResourceInstance;
  }

  record UserAgreementHistoryMsg {
    string originalID;
    union {string, null} inStoreID;
    string userID;
    long latestOccurredMillis; // the latest occurredMillis of all underlying agreements
    long latestValidFromMillis; // the latest validFromMillis of all underlying agreements
    long userCreationTimeMillis = 0;
    array<UserAgreementMsg> agreements;
  }

  record ChargeslotMsg {
    long startMillis;
    long stopMillis;
    string unitPrice;
    string explanation = "";
    string creditsToSubtract = 0.0;
  }

  // The following equation must hold (within a very small error):
  //   `newTotalCredits = oldTotalCredits - sumOfCreditsToSubtract`.
  record WalletEntryMsg {
    string userID; // The user ID this wallet entry is related to.
    string sumOfCreditsToSubtract; // The credit amount generated for this wallet entry.
    string oldTotalCredits;
    string newTotalCredits;
    long whenComputedMillis;   // When the computation took place
    long referenceStartMillis; // start of period this entry refers to
    long referenceStopMillis;  // end of period this entry refers to
    int billingYear;
    int billingMonth;
    int billingMonthDay;
    array<ChargeslotMsg> chargeslots; // The details of the credit computation
    array<ResourceEventMsg> resourceEvents; // The events used to make this computation. The current is the last one
    ResourceTypeMsg resourceType;
    boolean isSynthetic = false;
    boolean isForRealtimeCalc = false;
  }

  // convenient wrapper for a list of wallet entries
  record WalletEntriesMsg {
    array<WalletEntryMsg> entries;
  }

  record UserStateMsg {
    string originalID; // internal Aquarium ID
    union {string, null} inStoreID; // From Aquarium store
    string userID;
    long occurredMillis; // When we created the event
    union {string, null} parentOriginalID;
    union {string, null} parentInStoreID;
    boolean isFirst = false; // True only for the very first user state
    boolean isForFullMonth = false; // True when computed as a reference for a month's billing state
    map<ResourcesChargingStateMsg> stateOfResources; // Map[ResourceTypeMsg.name.type, ]
    string totalCredits = "0";
    long latestUpdateMillis; // // last update of this working user state
    long latestResourceEventOccurredMillis;
    long billingPeriodOutOfSyncResourceEventsCounter = 0;
    int billingYear; // The billing year this snapshot refers to
    int billingMonth; //  The billing month this year refers to
    int billingMonthDay;
    UserAgreementHistoryMsg userAgreementHistory;
    array<WalletEntryMsg> walletEntries;
  }
}